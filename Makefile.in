# $Id$
#

srcdir = @srcdir@
top_srcdir = @top_srcdir@
VPATH = @srcdir@
prefix = @prefix@
DESTDIR = @DESTDIR@
SHELL = @SHELL@

sysconfdir = @sysconfdir@
sslcertdir = @sysconfdir@
mnesiadir = @mnesiadir@
beamdir = @datadir@/yxa
sbindir = @sbindir@
exec_prefix='${prefix}'
builddir = @builddir@
local_file = @local_file@

ERLC = @ERLC@
ERL = @ERL@

INSTALL = @INSTALL@
install_DATA = @INSTALL_DATA@
install_PROGRAM = @INSTALL_PROGRAM@

mkinstalldirs = $(SHELL) $(top_srcdir)/mkinstalldirs


systools_make_script = \
	$(ERL) -noshell -run systools make_script $* -run init stop

create_start_script = \
	sed -e 's!@PROGRAMNAME@!$*!' \
	    -e 's!@CONFIGDIR@!$(sysconfdir)!' \
	    -e 's!@SSLCERTDIR@!$(sslcertdir)!' \
	    -e 's!@MNESIADIR@!$(mnesiadir)!' \
	    -e 's!@erl@!$(ERL)!' \
	    -e 's!@beamdir@!$(beamdir)!' < $(srcdir)/init.sh.in > $@.new && \
	chmod +x $@.new && \
	mv $@.new $@

LOCAL_ERL = local.erl-$(local_file)

erl_FILES = \
	LDAPv3.erl \
	admin_www.erl \
	appserver.erl \
	bootstrap.erl \
	clienttransaction.erl \
	database_call.erl \
	database_forward.erl \
	database_regexproute.erl \
	directory.erl \
	dnsutil.erl \
	dtmf.erl \
	eldap.erl \
	group_regexp.erl \
	gssapi.erl \
	hex.erl \
	incomingproxy.erl \
	keylist.erl \
	local.erl \
	logger.erl \
	lookup.erl \
	phone.erl \
	pstnproxy.erl \
	registrar.erl \
	rtp.erl \
	sdp.erl \
	servertransaction.erl \
	sipanswer.erl \
	sipauth.erl \
	sipclient.erl \
	sipdst.erl \
	sipheader.erl \
	siphost.erl \
	siplocation.erl \
	sippacket.erl \
	sippipe.erl \
	sipproxy.erl \
	siprequest.erl \
	sipserver.erl \
	sipserver_sup.erl \
	sipsocket.erl \
	sipsocket_tcp.erl \
	sipsocket_udp.erl \
	siptimer.erl \
	sipurl.erl \
	sipuserdb.erl \
	sipuserdb_file.erl \
	sipuserdb_ldap.erl \
	sipuserdb_mnesia.erl \
	sipuserdb_static.erl \
	siputil.erl \
	socketlist.erl \
	sound.erl \
	targetlist.erl \
	tcp_connection.erl \
	tcp_dispatcher.erl \
	tcp_listener.erl \
	tcp_receiver.erl \
	testserver.erl \
	transactionlayer.erl \
	transactionstatelist.erl \
	transportlayer.erl \
	util.erl \
	version.erl

imported_hrl_FILES = \
	LDAPv3.hrl \
	eldap.hrl \
	inet_dns.hrl

hrl_FILES = \
	database_call.hrl \
	database_forward.hrl \
	database_regexproute.hrl \
	phone.hrl \
	sipproxy.hrl \
	siprecords.hrl \
	sipsocket.hrl \
	socketlist.hrl \
	transactionstatelist.hrl

yxa_hrl_FILES = $(imported_hrl_FILES) $(hrl_FILES)

boot_FILES = \
	incomingproxy.boot \
	pstnproxy.boot \
	adminwww.boot \
	appserver.boot

start_FILES = $(boot_FILES:.boot=)

CC = gcc

beam_FILES = $(erl_FILES:.erl=.beam)

all: $(beam_FILES) bootstrap.sh dtmfserver $(boot_FILES) $(start_FILES)

install: $(boot_FILES) $(beam_FILES) $(start_FILES)
	$(mkinstalldirs) $(DESTDIR)$(sysconfdir)
	$(mkinstalldirs) $(DESTDIR)$(beamdir)
	for p in $(beam_FILES) $(boot_FILES) ; do \
	  $(install_DATA) $$p $(DESTDIR)$(beamdir)/$$f ; \
	done
	$(mkinstalldirs) $(DESTDIR)$(mnesiadir)
	$(mkinstalldirs) $(DESTDIR)$(sbindir)
	for p in $(start_FILES) ; do \
	  $(install_PROGRAM) $$p $(DESTDIR)$(sbindir)/$$f ; \
	done

clean:
	rm -f core *.core *~ config.status config.log
	rm -f bootstrap.sh local.erl
	rm -f newversion.erl.new version.erl.in
	rm -f *.beam *.script *.start *.boot *.rel *.app *.script
	rm -f *.o ktrace.out dtmfserver 

$(beam_FILES): $(yxa_hrl_FILES)
$(boot_FILES): $(beam_FILES)
#$(start_FILES): $(boot_FILES)

SUFFIXES = .c .o .hrl .beam .erl .boot .rel .rel-in .app .app-in
.SUFFIXES:
.SUFFIXES: .c .o .hrl .beam .erl .boot .rel .rel-in .app .app-in

.erl.beam:
	$(ERLC) -I$(srcdir) -W +debug_info $<

dtmfserver: dtmfserver.o
	$(CC) $(LDFLAGS) -o dtmfserver dtmfserver.o

.app-in.app:
	cp $(srcdir)/$*.app-in $*.app

.rel-in.rel:
	cp $(srcdir)/$*.rel-in $*.rel

local.erl: $(LOCAL_ERL)
	cp $(srcdir)/$(LOCAL_ERL) local.erl

#incomingproxy.start pstnproxy.start adminwww.start appserver.start

incomingproxy.boot: incomingproxy.app incomingproxy.rel
	$(systools_make_script)

pstnproxy.boot: pstnproxy.app pstnproxy.rel
	$(systools_make_script)

adminwww.boot: adminwww.app adminwww.rel
	$(systools_make_script)

appserver.boot: appserver.app appserver.rel
	$(systools_make_script)

bootstrap.sh: init.sh.in config.status
	$(create_start_script)

incomingproxy: incomingproxy.boot init.sh.in config.status
	$(create_start_script)

pstnproxy: pstnproxy.boot init.sh.in config.status
	$(create_start_script)

adminwww: adminwww.boot init.sh.in config.status
	$(create_start_script)

appserver: appserver.boot init.sh.in config.status
	$(create_start_script)
