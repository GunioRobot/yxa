============
Applications
============

Applications included are:

adminwww:

Web server that provides an https administration interface

incomingproxy:

Handles registrations and proxies requests. Implements partial ENUM
and LDAP searches.

pstnproxy:

Designed as an authentication frontend to an insecure PSTN gateway.
Supports the expired-draft-only header Remote-Party-Id to signal
what PSTN phone number to use when sending requests to the PSTN
gateway, and, if an LDAP server is configured, looks for a Display
Name to use for calls from the PSTN gateway. Can route calls from
the PSTN either via ENUM or to a preconfigured SIP gateway.

appserver:

Provides basic forking for now. If a user has multiple active
contacts, incomingproxy will send requests for that user on to
appserver which is a statefull proxy and can fork the call to
all the users registered user agents.

testserver:

Not useful for anything except regression testing. Answers 404 Not Found
(or some other failure response) to everything, so that one can do
regression tests of the incomingproxy for example by making sure it
routes requests correctly to the testserver.

============
Installation
============

1) Unpack the source

2) Change working directory to where you unpacked the source

3) Optionally, but preferrably - create a sub-directory called 'build'
   or whatever you desire (this does not have to be a sub-directory to
   where you unpacked the source).

4) Change into the 'build' directory you created in step 3.

5) Run ../configure && make && sudo make install

Configure options special to Yxa :

   --with-erlang	The path to your Erlang/OTP installation's
			'bin' directory.
   --with-mnesiadir	The path to where you want your Mnesia
			database files. Default is current directory,
			which might not be what you want (if you
			start Yxa on system startup, these files would
			probably end up in '/').
   --with-sslcertdir	The path to where you keep your SSL certificate
			files (cert.comb).
   --with-local		The suffix of local.erl-file you want. local.erl
			is a file containing hooks for all sorts of
			things, making it possible to make your own
			extensions to Yxa. The default is 'default',
			but 'su.se' and 'kth.se' local.erl's are also
			included in the distribution.
			Copy 'local.erl-default' to 'local.erl-your.domain'
			and use --with-local='your.domain' if you want
			to make your own custom local.erl.

===
SSL
===

If you want to use SSL (normally enabled), either put your combined
private and public X.509 key in ssl/cert.comb or edit the ssl.config
in the source directory and do "make sslkey" to get a self-signed
certificate. The certificate password must be "foobar" if you use
"make sslkey".

=====================
Distributed operation
=====================

If you want to setup a distributed erlang system, you must have the
same ~/.erlang.cookie file on all nodes.

=============
Configuration
=============

The configuration file is named <application>.config and contains
these variables:

common:
-------
logger_logbasename		(default: application name) Create log files
				based on this. If you specify
				/var/log/incomingproxy as logger_logbasename for
				your incomingproxy, it will log to the files
				/var/log/incomingproxy.debug (everything)
				/var/log/incomingproxy.log   (informational)
				/var/log/incomingproxy.error (errors)
sipauth_realm			(default: "") HTTP Auth realm
sipauth_password		(default: "") HTTP Auth internal cookie
sipauth_unauth_classlist	(default: []) Classes that anyone can call
databaseservers			(required if using remote databases)
				Erlang node specification of the database
				servers
ldap_server			(default: "" (ie. no LDAP)) LDAP server host name
ldap_username			(default: "") LDAP user name
ldap_password			(default: "") LDAP password
ldap_searchbase			(default: "") LDAP search base
ldap_use_ssl			(default: false) Connect to LDAP server using SSL
				if true.
ldap_connection_query_limit	(default: 500) When we have made this many querys
				using an LDAP handle, open a new one (as soon as
				we are idle).
listenport			(default: 5060) Port that the server
				should listen to
myhostnames			(optional) List of IP addresses and/or
				hostnames of the host you run pstnproxy on.
				The first entry in the list will be used
				to symbolize this host in SIP packets
				(for example in Record-Route and Via headers).
				If this is not set, the servers IP address
				will be used instead. Because of this, the
				first entry will need to be a real hostname for
				this host, and not a SRV record name even
				if that SRV record points at this host.
record_route			(default: false, except for pstnproxy where
				 default is true) Enable or disable adding
				Record-Route header to requests.
default_max_forwards		(default: 70) The Max-Forwards value we put in
				requests that does not have one. Only change for
				debugging, RFC3261 says this should be 70.
max_max_forwards		(default: 255) Upper limit for Max-Forwards in
				requests we send out. If we receive a request with
				a Max-Forwards greater than this, we will use this
				value instead of the received minus one.
detect_loops			(default: true) Detect looping requests. Leave
				this on.
request_rport			(default: false) Request rport in outgoing
				requests. Useful if you are sending through
				a NAT device.
stateless_challenges		(default: false) Send challenges without state
				if this is true. RFC3261 suggests you should do
				this, but there are problems with doing it...
				See comments in transactionlayer.erl,
				function send_challenge2().
tcp_connection_idle_timeout	(default: 300) Number of seconds of inactivity
				before we close a TCP connection.
tcp_connect_timeout		(default: 20) Number of seconds before we time
				out trying to establish a TCP connection to a
				remote host.
userdb_modules			(default: [sipuserdb_mnesia]) User database
				backend(s) to use. See "User database" section
				below.
enable_v6			(default: false) Enables IPv6 support. Read the
				IPv6 paragraph below before enabling this!
max_logfile_size		(default: 262144000 (250 MB)) Max filesize (in
				bytes) before the logfiles are rotated. This
				option will probably go away when we invent a
				controlling mechanism so that things like
				logfile size can be checked outside of Yxa
				instead, but this is needed for now since Erlang
				crashes when the logfles reach 2 GB. We only
				check if the file size exceeds this limit every
				60 seconds, not after every write.

pstnproxy:
----------
e164_to_pstn			(default: []) Regexps for choosing PSTN gateway
				to use for E.164 numbers.
number_to_pstn			(default: []) The same as e164_to_pstn, but
				consulted if a number could not be rewritten to
				a E.164 number (like an internal-only number).
pstngatewaynames		(required) List of IP addresses and/or
				hostnames of your PSTN gateway. The first
				entry in the list will be used in routing
				of SIP packets to the PSTN gateway if a lookup
				of the number in e164_to_pstn does not result
				in an address.
				Incoming requests will be matched against
				this list when checking if they are from the
				PSTN gateway or not.
classdefs			(default: [{"", unknown}]) Regexps for
				classifying outgoing phone numbers
sipproxy			The name of the SIP proxy to route calls
                                from the PSTN gateway to. This is something
                                like a default SIP route. If you enable
                                ENUM in the pstnproxy, ENUM is considered
                                before sipproxy. If you do not enter a
				sipproxy, and the number being called is
				not found using ENUM, 503 Service Unavailable
				will be returned.
enum_domainlist			(default: []) List of domains in which to look
				for NAPTR-records for requests _from_ the
				PSTN gateway. If you use this, you probably
				also want to configure internal_to_e164. The
				global E.164 root is e164.arpa, so an example
				would be ["e164.arpa", "e164.example.com"].
				All domains will be queried and after that
				the answers will be sorted and the best one
				will be used.
internal_to_e164		(default: []) Regexps for rewriting
				internal numbers to E.164 numbers. In pstnproxy,
				this is only used to query ENUM - NOT for
				rewriting stuff to E.164 before passing them
				to the PSTN gateway.
remote_party_id			(default: false) If you set this to true, then
				the pstnproxy will try to add information
				about the caller in a header called
				Remote-Party-Id. This is not a standard, but
				current versions of Cisco IOS (12.2.15T)
				supports it so it is nice to have. If you
				also configure LDAP for the pstnproxy, this
				function will try to look up a name to use
				in calls from the PSTN gateway, but I haven't
				seen a phone that displays this yet.

incomingproxy:
--------------
internal_to_e164		(default: []) Regexps for rewriting
				internal numbers to E.164 numbers.
e164_to_pstn			(default: []) Regexps for choosing PSTN gateway/
				pstnproxy to use for E.164 numbers.
number_to_pstn			(default: []) The same as e164_to_pstn, but
				consulted if a number could not be rewritten to
				a E.164 number (like an internal-only number).
defaultroute			(default: "") SIP host name part of default
				route. Note that if you use e164_to_pstn, you
				don't have to point defaultroute at your
				PSTN gateway.
homedomain			(required) List of SIP domains this proxy
				should handle requests for.
enum_domainlist			(default: []) List of domains in which to look
				for NAPTR-records for requests that are not
				to SIP-users but where the user part matches
				one of the regexps in internal_to_e164. The
				global E.164 root is e164.arpa, so an example
				would be ["e164.arpa", "e164.example.com"].
				All domains will be queried and after that
				the answers will be sorted and the best one
				will be used.
max_register_time		(default: 43200) If registers have an 'expire'
				of more than this many seconds, use this
				value instead.
always_verify_homedomain_user	(default: true) If From: matches our definition
				of 'our' domains (matched by homedomain), then
				challenge user and make sure it is not someone
				impersonating the calling party.

adminwww:
---------
www_baseurl			(required) Base URL for web server
httpd_config			(required) Path to httpd.conf

appserver:
----------
internal_to_e164		(default: []) Regexps for rewriting
				internal numbers to E.164 numbers. The
				appserver must have identical
				internal_to_e164 with the incomingproxy
				to be able to make the exact same routing
				decisions.
timerT1				(default: 500) See RFC 3261. You should
				probably not touch this.
timerT2				(default: 4000) See RFC 3261. You should
				probably not touch this.
timerT4				(default: 5000) See RFC 3261. You should
				probably not touch this.
appserver_call_timeout		(default: 40) The number of seconds to ring
				a destination before concluding that noone
				answers.
appserver_forward_timeout	(default: 40) The same as appserver_call_timeout
				but for forwarded calls.


========
Examples
========

incomingproxy.config:
---------------------

[{incomingproxy, [{sipauth_realm, "example.com"},
                  {sipauth_password, ""},
                  {defaultroute, "other-sipserver.example.com"},
                  {logger_logbasename, "/var/log/incomingproxy"},
                  {internal_to_e164, [{"^00(.+)$", "+\\1"},
                                      {"^0(.+)$", "+46\\1"},
                                      {"^(.+)$", "+468\\1"}
                                     ]},
		  {e164_to_pstn, [{"^\\+468([1-9][0-9]+)$", "00\\1@pstnproxy.example.com"},
				  {"^\\+46([1-9][0-9]+)$", "000\\1@pstnproxy..example.com"},
				  {"^\\+44([1-9][0-9]+)$", "000\\1@pstnproxy-uk.example.com"},
				  {"^\\+([0-9]+)$", "0000\\1@pstnproxy.example.com"}
                                 ]},
		  {number_to_pstn, [{"^118$", "118@pstnproxy.example.com"}]},
		  {enum_domainlist, ["e164.arpa"]},
                  {homedomain, ["example.com", "example.net", "example.org"]},
		  {myhostnames, ["sipserver.example.com", "sip.example.net", "sip.example.org"]},
		  {appserver, "appserver.example.com:5070"},
                  {ldap_server, "ldap.example.com"}
                 ]}].

pstnproxy.config:
-----------------
[{pstnproxy, [{sipauth_realm, "example.com"},
              {sipauth_password, ""},
              {sipauth_unauth_classlist, [internal]},
	      {logger_logbasename, "/var/log/pstnproxy"},
              {pstngatewaynames, ["pstn-gw.example.com", "10.10.1.1"]},
              {myhostnames, ["sip-pstn.example.com", "sip2pstn.example.com", "10.10.1.2"]},
              {classdefs, [{"^[1-9]", national},
                           {"^0[1-9]", national},
                           {"^00", international},
                           {"", unknown}
                          ]},
              {databaseservers, ['incomingproxy@sip-incoming.example.com']},
              {internal_to_e164, [{"^00(.+)$", "+\\1"},
                                  {"^0(.+)$", "+46\\1"},
                                  {"^(.+)$", "+468\\1"}
                                 ]},
	      {e164_to_pstn, [{"^\\(+44[1-9][0-9]+)$", "\\1@uk-toll-bypass.tsp.example.net"}]},
	      {number_to_pstn, [{"^118$"}, "sip:118@pstn-gw.example.com"]},
	      {enum_domainlist, ["e164.arpa"]},
             ]}].

appserver.config:
-----------------
[{appserver, [{sipauth_realm, "example.com"},
	      {sipauth_password, "xubique"},
	      {logger_logbasename, "/var/log/appserver"},
	      {internal_to_e164, [{"^00(.+)$", "+\\1"},
				  {"^0(.+)$", "+46\\1"},
				  {"^(.+)$", "+468\\1"}
				 ]},
	      {databaseservers, ['incomingproxy@sip-incoming.example.com']},
	      {myhostnames, ["appserver.example.com", "10.10.1.1"]},
	      {record_route, true},
	      {listenport, 5070}
             ]}].

sipuserdb_file user database :
------------------------------
[
 {user, [
	 {name, "ft.sip1"},
	 {password, "secret"},
	 {classes, [internal,national,mobile]}
	]},
 {user, [
	 {name, "foo@example.org"},
	 {password, "secret2"},
	 {classes, [internal]}
	]},

 {address, [
	    {user, "ft.sip1"},
	    {address, "sip:ft@example.org"}
	   ]},
 {address, [
	    {user, "ft.sip1"},
	    {address, "sip:all@example.org"}
	   ]},

 {address, [
	    {user, "ft.sip2"},
	    {address, "sip:info@example.org"}
	   ]},
 {address, [
	    {user, "ft.sip2"},
	    {address, "sip:all@example.org"}
	   ]}
].

This is a simple user database. If I have two phones, and let one REGISTER
with 'To: sip:ft@example.org' and authentication username 'ft.sip1', and
the other REGISTER with 'To: sip:info@example.org' and authentication
username 'foo@example.org' (NOTE: no "sip:"), calls to sip:ft@example.org
will cause phone #1 to ring and calls to sip:info@example.org will cause
phone #2 to ring. Calls to sip:all@example.org will cause both phones to
ring, provided that I have an incomingproxy and an appserver set up and
configured.


=============
User database
=============

Yxa has a modular interface for user database backends. The entry point is
the sipuserdb module, which looks at your configuration to determine which
database backends to query, and in what order. The default is to just look
in the Mnesia database (tables user and numbers), but there is also an
LDAP module, and a plain text file, backend available. The schema for
storing SIP user information in LDAP is not yet finished, and is currently
not even included in the Yxa source, but the sipuserdb_ldap module is used
in production at Stockholm university.

sipuserdb_ldap configuration parameters :

ldap_userattribute		(deafult: sipAuthenticationUser) User
				attribute.
ldap_addressattribute		(default: sipLocalAddress) User SIP address
				attribute.
ldap_telephonenumberattribute	(default: telephoneNumber) User phone number
				attribute.
ldap_passwordattribute		(default: sipPassword) User authentication
				password attribute.

sipuserdb_file configuration parameters :

sipuserdb_file_filename		(required) Filename (including path) of
				your user database. See above (section
				Examples) for format of this file.
sipuserdb_file_refresh_interval	(default: 60) Interval (in seconds) between
				checks for updated user database file.


=============
Bootstrapping
=============

In your build directory, you should have a file called bootstrap.sh. 
Execute this script with the environment variable ADMINPW set to whatever
initial admin-user password you wish. This script will create a
Mnesia schema and all the needed Mnesia tables for you. You will have to
execute it on the host where you are going to run the incomingproxy.

Example :

   $ ADMINPW=foo /path/to/build/directory/bootstrap.sh

You should now have the necessary Mnesia databases and a user called 'admin'
with the password in bootstrap.sh which you can use to add SIP users to
your system through the web interface. In order to use the web interface,
you must have added 'adminwww.start' to the STARTSCRIPT variable in the
Makefile (see Installation above) and you must start the web interface by
executing ./adminwww.start.

All of the Yxa application can run just fine without root permissions.


============
IPv6 support
============

If you enable IPv6 support, you need to add your v6 addresses to the
myhostnames configuration variable, because siphost:myip_list() is currently
not capable of detecting your IPv6 address (Erlang OTP R9C-0). If you don't
do this, then lookup:homedomain() will not work properly and you might get
problems with requests sent with a URI containing your IPv6 address.

IPv6 support is disabled by default, because you need to know what you are
doing before turning it on. If you enable it to make proxy-to-proxy
communication use v6 and a v6-only proxy adds Record-Route headers, then
v4-only clients won't be able to reach the v6-only proxy. This could be
fixed by making Yxa always Record-Route when receiving a request over v4/v6
and sending it out using the other but then there is still the problem with
v6-only phones responding to INVITE with a SDP offer containing a v6 address.
How will a v4-only phone be able to send audio to that phone, and receive
audio from that phone? v6 is disabled by default.

If you are using Linux, then you will need to

	# echo 1 > /proc/sys/net/ipv6/bindv6only

since Yxa wants to use separate sockets for v6 and v4. IPv6 support has only
been tested on Linux 2.4.x where x >= 20.

